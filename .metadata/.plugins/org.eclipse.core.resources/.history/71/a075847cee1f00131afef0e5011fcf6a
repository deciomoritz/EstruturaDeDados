#include "Elemento.h"
#include <stdexcept>

template<typename Tipo>
class Lista {

	Elemento<Tipo>* cabeca;
	int tamanho;

public:

	Lista() :
			cabeca(0), tamanho(0) {
	}

	void adicionarNoInicio(Tipo t) {
		Elemento<Tipo>* novo = new Elemento<Tipo>(t);
		tamanho++;
		if (cabeca == 0) {
			cabeca = novo;
			return;
		}
		novo->proximo = cabeca;
		cabeca = novo;
	}

	void adicionar(Tipo t) {
		Elemento<Tipo>* novo = new Elemento<Tipo>(t);

		Elemento<Tipo>* aux = cabeca;
		while (aux->proximo != 0)
			aux = aux->proximo;
		aux->proximo = novo;

		tamanho++;
	}

	Tipo removerDoInicio() {
		if (!vazia()) {
			Elemento<Tipo>* aux = cabeca;
			if (tamanho == 1)
				cabeca = 0;
			else
				cabeca = cabeca->proximo;
			tamanho--;
			Tipo dado = aux->dado;
			delete aux;
			return dado;
		}
		throw std::runtime_error("Tentando remover elemento de lista vazia");
	}

	Tipo remover() {
		if (!vazia()) {
			Elemento<Tipo>* aux = cabeca;

			for(int i=0;i<tamanho-2;i++)
				aux = aux->proximo;

			Tipo dado = aux->proximo->dado;
			aux->proximo = 0;
			tamanho--;
			return dado;
		}
		throw std::runtime_error("Tentando remover elemento de lista vazia");
	}

	bool vazia() {
		return tamanho == 0;
	}
};
