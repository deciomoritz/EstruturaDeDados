#include "Elemento.h"
#include <stdexcept>
#include <string>

template<typename Tipo>
class ListaDupla {
    Elemento<Tipo>* cabeca;
    Elemento<Tipo>* anterior;
    int tamanho;

public:

    ListaDupla() : cabeca(new Elemento<Tipo>(0)), tamanho(0) {
        cabeca->proximo = cabeca;
        cabeca->anterior = cabeca;
    }

    void adicionarNoInicio(Tipo t) {
        Elemento<Tipo>* novo;
        novo = new Elemento<Tipo>(t);

        if (novo == 0)
            throw std::runtime_error("Impossível adicionar nova transação! Erro de lista cheia!");
        tamanho++;

        novo->proximo = cabeca->proximo;
        novo->anterior = cabeca;
        cabeca->proximo = novo;
        novo->proximo->anterior = novo;
    }

    void adicionar(Tipo t) {
        Elemento<Tipo> *novo = new Elemento<Tipo>(t);
        if (novo == 0)
            throw std::runtime_error("Deu merda");
        novo->anterior = cabeca->anterior;
        novo->anterior->proximo = novo;
        novo->proximo = cabeca;
        cabeca->anterior = novo;
        tamanho++;
    }

    void adicionarNaPosicao(Tipo t, int pos) {
        if (pos < 0 || pos > tamanho)
            throw std::runtime_error("Deu merda");

        if (pos == 0) {
            adicionarNoInicio(t);
            return;
        }
        Elemento<Tipo> *novo = new Elemento<Tipo>(t);
        Elemento<Tipo> *aux;

        if (novo == 0)
            throw std::runtime_error("Deu merda");
        aux = cabeca->proximo;
        for (int i = 1; i < pos; i++)
            aux = aux->proximo;
        novo->proximo = aux->proximo;
        novo->proximo->anterior = novo;
        novo->anterior = aux;
        aux->proximo = novo;
        tamanho++;
    }

    Tipo retirarDaPosicao(int pos) {
        if (pos >= tamanho)
            throw std::runtime_error("Posição inválida");

        Elemento<Tipo> *aux, *eliminar;
        Tipo retorno;

        if (pos == 0)
            return removerDoInicio();
        aux = cabeca;
        for (int i = 0; i < pos; i++)
            aux = aux->proximo;
        eliminar = aux;
        if (aux->proximo != 0)
            aux->proximo->anterior = aux->anterior;
        aux->anterior->proximo = aux->proximo;
        retorno = aux->dado;
        tamanho--;
        delete eliminar;
        return retorno;
    }

    Tipo removerDoInicio() {
        if (!vazia()) {
            Elemento<Tipo>* aux = cabeca;
            Tipo dado = aux->dado;
            tamanho--;
            cabeca->proximo = aux->proximo;
            aux->proximo->anterior = cabeca;
            delete aux;
            return dado;
        }
        throw std::runtime_error("Tentando remover elemento de lista vazia");
    }

    Elemento<Tipo> mostra(int i) {
        if (i < 0 || i >= tamanho)
            throw -1;

        if (i == 0)
            return cabeca->dado;

        Elemento<Tipo> *aux;
        aux = cabeca;

        for (int j = 0; j < i; j++)
            aux = aux->proximo;

        return aux->dado;
    }

    void limpar() {
        while (!vazia())
            remover();
    }

    int getTamanho() {
        return tamanho;
    }

    Tipo remover() {
        return retirarDaPosicao(tamanho - 1);
    }

    bool vazia() {
        return tamanho == 0;
    }
};